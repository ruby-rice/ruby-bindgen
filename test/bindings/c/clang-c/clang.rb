# This file was generated by ruby-bindgen. Please do not edit by hand.
require 'ffi'

FFI::DynamicLibrary::SEARCH_PATH = ["c:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/Llvm/x64/bin"]

module Index
  extend FFI::Library

  def self.library_names
    ["clang"]
  end

  def self.library_versions
    []
  end

  def self.search_names
    result = Array.new
    self.library_names.each do |name|
      result << "lib#{name}"
      self.library_versions.each do |version|
        case RbConfig::CONFIG['host_os']
          when /mswin|msys|mingw|cygwin|bccwin|wince|emc/
            result << "lib#{name}-#{version}"
            result << "lib#{name}_#{version}"
          when /darwin|mac os/
            result << "lib#{name}.#{version}"
          else
            result << "lib#{name}.so.#{version}"
        end
      end
    end
    result
  end

  ffi_lib self.search_names

  
  CXErrorCode = enum(
      :cx_error_success, 0,
      :cx_error_failure, 1,
      :cx_error_crashed, 2,
      :cx_error_invalid_arguments, 3,
      :cx_error_ast_read_error, 4
  )
  
  class CXString < FFI::Struct
    layout :data, :pointer,
      :private_flags, :uint
  end
  
  class CXStringSet < FFI::Struct
    layout :strings, CXString.ptr,
      :count, :uint
  end
  
  attach_function :clang_get_c_string, :clang_getCString, [cx_string.by_value], :string
  attach_function :clang_dispose_string, :clang_disposeString, [cx_string.by_value], :void
  attach_function :clang_dispose_string_set, :clang_disposeStringSet, [CXStringSet.by_ref], :void
  attach_function :clang_get_build_session_timestamp, :clang_getBuildSessionTimestamp, [], :ulong_long
  
  class CXVirtualFileOverlayImpl < FFI::Struct
  end
  
  typedef CXVirtualFileOverlayImpl.ptr, :cx_virtual_file_overlay
  attach_function :clang_virtual_file_overlay_create, :clang_VirtualFileOverlay_create, [:uint], :pointer
  attach_function :clang_virtual_file_overlay_add_file_mapping, :clang_VirtualFileOverlay_addFileMapping, [:pointer, :string, :string], CXErrorCode
  attach_function :clang_virtual_file_overlay_set_case_sensitivity, :clang_VirtualFileOverlay_setCaseSensitivity, [:pointer, :int], CXErrorCode
  attach_function :clang_virtual_file_overlay_write_to_buffer, :clang_VirtualFileOverlay_writeToBuffer, [:pointer, :uint, :pointer, :pointer], CXErrorCode
  attach_function :clang_free, :clang_free, [:pointer], :void
  attach_function :clang_virtual_file_overlay_dispose, :clang_VirtualFileOverlay_dispose, [:pointer], :void
  
  class CXModuleMapDescriptorImpl < FFI::Struct
  end
  
  typedef CXModuleMapDescriptorImpl.ptr, :cx_module_map_descriptor
  attach_function :clang_module_map_descriptor_create, :clang_ModuleMapDescriptor_create, [:uint], :pointer
  attach_function :clang_module_map_descriptor_set_framework_module_name, :clang_ModuleMapDescriptor_setFrameworkModuleName, [:pointer, :string], CXErrorCode
  attach_function :clang_module_map_descriptor_set_umbrella_header, :clang_ModuleMapDescriptor_setUmbrellaHeader, [:pointer, :string], CXErrorCode
  attach_function :clang_module_map_descriptor_write_to_buffer, :clang_ModuleMapDescriptor_writeToBuffer, [:pointer, :uint, :pointer, :pointer], CXErrorCode
  attach_function :clang_module_map_descriptor_dispose, :clang_ModuleMapDescriptor_dispose, [:pointer], :void
  typedef :pointer, :cx_file
  attach_function :clang_get_file_name, :clang_getFileName, [:pointer], cx_string.by_value
  attach_function :clang_get_file_time, :clang_getFileTime, [:pointer], :long_long
  
  class CXFileUniqueID < FFI::Struct
    layout :data, [:ulong_long, 3]
  end
  
  attach_function :clang_get_file_unique_id, :clang_getFileUniqueID, [:pointer, CXFileUniqueID.by_ref], :int
  attach_function :clang_file_is_equal, :clang_File_isEqual, [:pointer, :pointer], :int
  attach_function :clang_file_try_get_real_path_name, :clang_File_tryGetRealPathName, [:pointer], cx_string.by_value
  
  class CXSourceLocation < FFI::Struct
    layout :ptr_data, [:pointer, 2],
      :int_data, :uint
  end
  
  class CXSourceRange < FFI::Struct
    layout :ptr_data, [:pointer, 2],
      :begin_int_data, :uint,
      :end_int_data, :uint
  end
  
  attach_function :clang_get_null_location, :clang_getNullLocation, [], cx_source_location.by_value
  attach_function :clang_equal_locations, :clang_equalLocations, [cx_source_location.by_value, cx_source_location.by_value], :uint
  attach_function :clang_location_is_in_system_header, :clang_Location_isInSystemHeader, [cx_source_location.by_value], :int
  attach_function :clang_location_is_from_main_file, :clang_Location_isFromMainFile, [cx_source_location.by_value], :int
  attach_function :clang_get_null_range, :clang_getNullRange, [], cx_source_range.by_value
  attach_function :clang_get_range, :clang_getRange, [cx_source_location.by_value, cx_source_location.by_value], cx_source_range.by_value
  attach_function :clang_equal_ranges, :clang_equalRanges, [cx_source_range.by_value, cx_source_range.by_value], :uint
  attach_function :clang_range_is_null, :clang_Range_isNull, [cx_source_range.by_value], :int
  attach_function :clang_get_expansion_location, :clang_getExpansionLocation, [cx_source_location.by_value, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_get_presumed_location, :clang_getPresumedLocation, [cx_source_location.by_value, CXString.by_ref, :pointer, :pointer], :void
  attach_function :clang_get_instantiation_location, :clang_getInstantiationLocation, [cx_source_location.by_value, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_get_spelling_location, :clang_getSpellingLocation, [cx_source_location.by_value, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_get_file_location, :clang_getFileLocation, [cx_source_location.by_value, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_get_range_start, :clang_getRangeStart, [cx_source_range.by_value], cx_source_location.by_value
  attach_function :clang_get_range_end, :clang_getRangeEnd, [cx_source_range.by_value], cx_source_location.by_value
  
  class CXSourceRangeList < FFI::Struct
    layout :count, :uint,
      :ranges, CXSourceRange.ptr
  end
  
  attach_function :clang_dispose_source_range_list, :clang_disposeSourceRangeList, [CXSourceRangeList.by_ref], :void
  
  CXDiagnosticSeverity = enum(
      :cx_diagnostic_ignored, 0,
      :cx_diagnostic_note, 1,
      :cx_diagnostic_warning, 2,
      :cx_diagnostic_error, 3,
      :cx_diagnostic_fatal, 4
  )
  
  typedef :pointer, :cx_diagnostic
  typedef :pointer, :cx_diagnostic_set
  attach_function :clang_get_num_diagnostics_in_set, :clang_getNumDiagnosticsInSet, [:pointer], :uint
  attach_function :clang_get_diagnostic_in_set, :clang_getDiagnosticInSet, [:pointer, :uint], :pointer
  
  CXLoadDiag_Error = enum(
      :cx_load_diag_none, 0,
      :cx_load_diag_unknown, 1,
      :cx_load_diag_cannot_load, 2,
      :cx_load_diag_invalid_file, 3
  )
  
  attach_function :clang_load_diagnostics, :clang_loadDiagnostics, [:string, :pointer, CXString.by_ref], :pointer
  attach_function :clang_dispose_diagnostic_set, :clang_disposeDiagnosticSet, [:pointer], :void
  attach_function :clang_get_child_diagnostics, :clang_getChildDiagnostics, [:pointer], :pointer
  attach_function :clang_dispose_diagnostic, :clang_disposeDiagnostic, [:pointer], :void
  
  CXDiagnosticDisplayOptions = enum(
      :cx_diagnostic_display_source_location, 1,
      :cx_diagnostic_display_column, 2,
      :cx_diagnostic_display_source_ranges, 4,
      :cx_diagnostic_display_option, 8,
      :cx_diagnostic_display_category_id, 16,
      :cx_diagnostic_display_category_name, 32
  )
  
  attach_function :clang_format_diagnostic, :clang_formatDiagnostic, [:pointer, :uint], cx_string.by_value
  attach_function :clang_default_diagnostic_display_options, :clang_defaultDiagnosticDisplayOptions, [], :uint
  attach_function :clang_get_diagnostic_severity, :clang_getDiagnosticSeverity, [:pointer], CXDiagnosticSeverity
  attach_function :clang_get_diagnostic_location, :clang_getDiagnosticLocation, [:pointer], cx_source_location.by_value
  attach_function :clang_get_diagnostic_spelling, :clang_getDiagnosticSpelling, [:pointer], cx_string.by_value
  attach_function :clang_get_diagnostic_option, :clang_getDiagnosticOption, [:pointer, CXString.by_ref], cx_string.by_value
  attach_function :clang_get_diagnostic_category, :clang_getDiagnosticCategory, [:pointer], :uint
  attach_function :clang_get_diagnostic_category_name, :clang_getDiagnosticCategoryName, [:uint], cx_string.by_value
  attach_function :clang_get_diagnostic_category_text, :clang_getDiagnosticCategoryText, [:pointer], cx_string.by_value
  attach_function :clang_get_diagnostic_num_ranges, :clang_getDiagnosticNumRanges, [:pointer], :uint
  attach_function :clang_get_diagnostic_range, :clang_getDiagnosticRange, [:pointer, :uint], cx_source_range.by_value
  attach_function :clang_get_diagnostic_num_fix_its, :clang_getDiagnosticNumFixIts, [:pointer], :uint
  attach_function :clang_get_diagnostic_fix_it, :clang_getDiagnosticFixIt, [:pointer, :uint, CXSourceRange.by_ref], cx_string.by_value
  typedef :pointer, :cx_index
  
  class CXTargetInfoImpl < FFI::Struct
  end
  
  typedef CXTargetInfoImpl.ptr, :cx_target_info
  
  class CXTranslationUnitImpl < FFI::Struct
  end
  
  typedef CXTranslationUnitImpl.ptr, :cx_translation_unit
  typedef :pointer, :cx_client_data
  
  class CXUnsavedFile < FFI::Struct
    layout :filename, :string,
      :contents, :string,
      :length, :ulong
  end
  
  CXAvailabilityKind = enum(
      :cx_availability_available, 0,
      :cx_availability_deprecated, 1,
      :cx_availability_not_available, 2,
      :cx_availability_not_accessible, 3
  )
  
  class CXVersion < FFI::Struct
    layout :major, :int,
      :minor, :int,
      :subminor, :int
  end
  
  CXCursor_ExceptionSpecificationKind = enum(
      :cx_cursor_exception_specification_kind_none, 0,
      :cx_cursor_exception_specification_kind_dynamic_none, 1,
      :cx_cursor_exception_specification_kind_dynamic, 2,
      :cx_cursor_exception_specification_kind_ms_any, 3,
      :cx_cursor_exception_specification_kind_basic_noexcept, 4,
      :cx_cursor_exception_specification_kind_computed_noexcept, 5,
      :cx_cursor_exception_specification_kind_unevaluated, 6,
      :cx_cursor_exception_specification_kind_uninstantiated, 7,
      :cx_cursor_exception_specification_kind_unparsed, 8,
      :cx_cursor_exception_specification_kind_no_throw, 9
  )
  
  attach_function :clang_create_index, :clang_createIndex, [:int, :int], :pointer
  attach_function :clang_dispose_index, :clang_disposeIndex, [:pointer], :void
  
  CXChoice = enum(
      :cx_choice_default, 0,
      :cx_choice_enabled, 1,
      :cx_choice_disabled, 2
  )
  
  CXGlobalOptFlags = enum(
      :cx_global_opt_none, 0,
      :cx_global_opt_thread_background_priority_for_indexing, 1,
      :cx_global_opt_thread_background_priority_for_editing, 2,
      :cx_global_opt_thread_background_priority_for_all, 3
  )
  
  class CXIndexOptions < FFI::Struct
    layout :size, :uint,
      :thread_background_priority_for_indexing, :uchar,
      :thread_background_priority_for_editing, :uchar,
      :exclude_declarations_from_pch, :uint,
      :display_diagnostics, :uint,
      :store_preambles_in_memory, :uint,
      :, :uint,
      :preamble_storage_path, :string,
      :invocation_emission_path, :string
  end
  
  attach_function :clang_create_index_with_options, :clang_createIndexWithOptions, [CXIndexOptions.by_ref], :pointer
  attach_function :clang_cx_index_set_global_options, :clang_CXIndex_setGlobalOptions, [:pointer, :uint], :void
  attach_function :clang_cx_index_get_global_options, :clang_CXIndex_getGlobalOptions, [:pointer], :uint
  attach_function :clang_cx_index_set_invocation_emission_path_option, :clang_CXIndex_setInvocationEmissionPathOption, [:pointer, :string], :void
  attach_function :clang_is_file_multiple_include_guarded, :clang_isFileMultipleIncludeGuarded, [:pointer, :pointer], :uint
  attach_function :clang_get_file, :clang_getFile, [:pointer, :string], :pointer
  attach_function :clang_get_file_contents, :clang_getFileContents, [:pointer, :pointer, :pointer], :string
  attach_function :clang_get_location, :clang_getLocation, [:pointer, :pointer, :uint, :uint], cx_source_location.by_value
  attach_function :clang_get_location_for_offset, :clang_getLocationForOffset, [:pointer, :pointer, :uint], cx_source_location.by_value
  attach_function :clang_get_skipped_ranges, :clang_getSkippedRanges, [:pointer, :pointer], CXSourceRangeList.by_ref
  attach_function :clang_get_all_skipped_ranges, :clang_getAllSkippedRanges, [:pointer], CXSourceRangeList.by_ref
  attach_function :clang_get_num_diagnostics, :clang_getNumDiagnostics, [:pointer], :uint
  attach_function :clang_get_diagnostic, :clang_getDiagnostic, [:pointer, :uint], :pointer
  attach_function :clang_get_diagnostic_set_from_tu, :clang_getDiagnosticSetFromTU, [:pointer], :pointer
  attach_function :clang_get_translation_unit_spelling, :clang_getTranslationUnitSpelling, [:pointer], cx_string.by_value
  attach_function :clang_create_translation_unit_from_source_file, :clang_createTranslationUnitFromSourceFile, [:pointer, :string, :int, :pointer, :uint, CXUnsavedFile.by_ref], :pointer
  attach_function :clang_create_translation_unit, :clang_createTranslationUnit, [:pointer, :string], :pointer
  attach_function :clang_create_translation_unit2, :clang_createTranslationUnit2, [:pointer, :string, :pointer], CXErrorCode
  
  CXTranslationUnit_Flags = enum(
      :cx_translation_unit_none, 0,
      :cx_translation_unit_detailed_preprocessing_record, 1,
      :cx_translation_unit_incomplete, 2,
      :cx_translation_unit_precompiled_preamble, 4,
      :cx_translation_unit_cache_completion_results, 8,
      :cx_translation_unit_for_serialization, 16,
      :cx_translation_unit_cxx_chained_pch, 32,
      :cx_translation_unit_skip_function_bodies, 64,
      :cx_translation_unit_include_brief_comments_in_code_completion, 128,
      :cx_translation_unit_create_preamble_on_first_parse, 256,
      :cx_translation_unit_keep_going, 512,
      :cx_translation_unit_single_file_parse, 1024,
      :cx_translation_unit_limit_skip_function_bodies_to_preamble, 2048,
      :cx_translation_unit_include_attributed_types, 4096,
      :cx_translation_unit_visit_implicit_attributes, 8192,
      :cx_translation_unit_ignore_non_errors_from_included_files, 16384,
      :cx_translation_unit_retain_excluded_conditional_blocks, 32768
  )
  
  attach_function :clang_default_editing_translation_unit_options, :clang_defaultEditingTranslationUnitOptions, [], :uint
  attach_function :clang_parse_translation_unit, :clang_parseTranslationUnit, [:pointer, :string, :pointer, :int, CXUnsavedFile.by_ref, :uint, :uint], :pointer
  attach_function :clang_parse_translation_unit2, :clang_parseTranslationUnit2, [:pointer, :string, :pointer, :int, CXUnsavedFile.by_ref, :uint, :uint, :pointer], CXErrorCode
  attach_function :clang_parse_translation_unit2_full_argv, :clang_parseTranslationUnit2FullArgv, [:pointer, :string, :pointer, :int, CXUnsavedFile.by_ref, :uint, :uint, :pointer], CXErrorCode
  
  CXSaveTranslationUnit_Flags = enum(
      :cx_save_translation_unit_none, 0
  )
  
  attach_function :clang_default_save_options, :clang_defaultSaveOptions, [:pointer], :uint
  
  CXSaveError = enum(
      :cx_save_error_none, 0,
      :cx_save_error_unknown, 1,
      :cx_save_error_translation_errors, 2,
      :cx_save_error_invalid_tu, 3
  )
  
  attach_function :clang_save_translation_unit, :clang_saveTranslationUnit, [:pointer, :string, :uint], :int
  attach_function :clang_suspend_translation_unit, :clang_suspendTranslationUnit, [:pointer], :uint
  attach_function :clang_dispose_translation_unit, :clang_disposeTranslationUnit, [:pointer], :void
  
  CXReparse_Flags = enum(
      :cx_reparse_none, 0
  )
  
  attach_function :clang_default_reparse_options, :clang_defaultReparseOptions, [:pointer], :uint
  attach_function :clang_reparse_translation_unit, :clang_reparseTranslationUnit, [:pointer, :uint, CXUnsavedFile.by_ref, :uint], :int
  
  CXTUResourceUsageKind = enum(
      :cxtu_resource_usage_ast, 1,
      :cxtu_resource_usage_identifiers, 2,
      :cxtu_resource_usage_selectors, 3,
      :cxtu_resource_usage_global_completion_results, 4,
      :cxtu_resource_usage_source_manager_content_cache, 5,
      :cxtu_resource_usage_ast_side_tables, 6,
      :cxtu_resource_usage_source_manager_membuffer_malloc, 7,
      :cxtu_resource_usage_source_manager_membuffer_m_map, 8,
      :cxtu_resource_usage_external_ast_source_membuffer_malloc, 9,
      :cxtu_resource_usage_external_ast_source_membuffer_m_map, 10,
      :cxtu_resource_usage_preprocessor, 11,
      :cxtu_resource_usage_preprocessing_record, 12,
      :cxtu_resource_usage_source_manager_data_structures, 13,
      :cxtu_resource_usage_preprocessor_header_search, 14,
      :cxtu_resource_usage_memory_in_bytes_begin, 1,
      :cxtu_resource_usage_memory_in_bytes_end, 14,
      :cxtu_resource_usage_first, 1,
      :cxtu_resource_usage_last, 14
  )
  
  attach_function :clang_get_tu_resource_usage_name, :clang_getTUResourceUsageName, [CXTUResourceUsageKind], :string
  
  class CXTUResourceUsageEntry < FFI::Struct
    layout :kind, CXTUResourceUsageKind,
      :amount, :ulong
  end
  
  class CXTUResourceUsage < FFI::Struct
    layout :data, :pointer,
      :num_entries, :uint,
      :entries, CXTUResourceUsageEntry.ptr
  end
  
  attach_function :clang_get_cxtu_resource_usage, :clang_getCXTUResourceUsage, [:pointer], cxtu_resource_usage.by_value
  attach_function :clang_dispose_cxtu_resource_usage, :clang_disposeCXTUResourceUsage, [cxtu_resource_usage.by_value], :void
  attach_function :clang_get_translation_unit_target_info, :clang_getTranslationUnitTargetInfo, [:pointer], :pointer
  attach_function :clang_target_info_dispose, :clang_TargetInfo_dispose, [:pointer], :void
  attach_function :clang_target_info_get_triple, :clang_TargetInfo_getTriple, [:pointer], cx_string.by_value
  attach_function :clang_target_info_get_pointer_width, :clang_TargetInfo_getPointerWidth, [:pointer], :int
  
  CXCursorKind = enum(
      :cx_cursor_unexposed_decl, 1,
      :cx_cursor_struct_decl, 2,
      :cx_cursor_union_decl, 3,
      :cx_cursor_class_decl, 4,
      :cx_cursor_enum_decl, 5,
      :cx_cursor_field_decl, 6,
      :cx_cursor_enum_constant_decl, 7,
      :cx_cursor_function_decl, 8,
      :cx_cursor_var_decl, 9,
      :cx_cursor_parm_decl, 10,
      :cx_cursor_obj_c_interface_decl, 11,
      :cx_cursor_obj_c_category_decl, 12,
      :cx_cursor_obj_c_protocol_decl, 13,
      :cx_cursor_obj_c_property_decl, 14,
      :cx_cursor_obj_c_ivar_decl, 15,
      :cx_cursor_obj_c_instance_method_decl, 16,
      :cx_cursor_obj_c_class_method_decl, 17,
      :cx_cursor_obj_c_implementation_decl, 18,
      :cx_cursor_obj_c_category_impl_decl, 19,
      :cx_cursor_typedef_decl, 20,
      :cx_cursor_cxx_method, 21,
      :cx_cursor_namespace, 22,
      :cx_cursor_linkage_spec, 23,
      :cx_cursor_constructor, 24,
      :cx_cursor_destructor, 25,
      :cx_cursor_conversion_function, 26,
      :cx_cursor_template_type_parameter, 27,
      :cx_cursor_non_type_template_parameter, 28,
      :cx_cursor_template_template_parameter, 29,
      :cx_cursor_function_template, 30,
      :cx_cursor_class_template, 31,
      :cx_cursor_class_template_partial_specialization, 32,
      :cx_cursor_namespace_alias, 33,
      :cx_cursor_using_directive, 34,
      :cx_cursor_using_declaration, 35,
      :cx_cursor_type_alias_decl, 36,
      :cx_cursor_obj_c_synthesize_decl, 37,
      :cx_cursor_obj_c_dynamic_decl, 38,
      :cx_cursor_cxx_access_specifier, 39,
      :cx_cursor_first_decl, 1,
      :cx_cursor_last_decl, 39,
      :cx_cursor_first_ref, 40,
      :cx_cursor_obj_c_super_class_ref, 40,
      :cx_cursor_obj_c_protocol_ref, 41,
      :cx_cursor_obj_c_class_ref, 42,
      :cx_cursor_type_ref, 43,
      :cx_cursor_cxx_base_specifier, 44,
      :cx_cursor_template_ref, 45,
      :cx_cursor_namespace_ref, 46,
      :cx_cursor_member_ref, 47,
      :cx_cursor_label_ref, 48,
      :cx_cursor_overloaded_decl_ref, 49,
      :cx_cursor_variable_ref, 50,
      :cx_cursor_last_ref, 50,
      :cx_cursor_first_invalid, 70,
      :cx_cursor_invalid_file, 70,
      :cx_cursor_no_decl_found, 71,
      :cx_cursor_not_implemented, 72,
      :cx_cursor_invalid_code, 73,
      :cx_cursor_last_invalid, 73,
      :cx_cursor_first_expr, 100,
      :cx_cursor_unexposed_expr, 100,
      :cx_cursor_decl_ref_expr, 101,
      :cx_cursor_member_ref_expr, 102,
      :cx_cursor_call_expr, 103,
      :cx_cursor_obj_c_message_expr, 104,
      :cx_cursor_block_expr, 105,
      :cx_cursor_integer_literal, 106,
      :cx_cursor_floating_literal, 107,
      :cx_cursor_imaginary_literal, 108,
      :cx_cursor_string_literal, 109,
      :cx_cursor_character_literal, 110,
      :cx_cursor_paren_expr, 111,
      :cx_cursor_unary_operator, 112,
      :cx_cursor_array_subscript_expr, 113,
      :cx_cursor_binary_operator, 114,
      :cx_cursor_compound_assign_operator, 115,
      :cx_cursor_conditional_operator, 116,
      :cx_cursor_c_style_cast_expr, 117,
      :cx_cursor_compound_literal_expr, 118,
      :cx_cursor_init_list_expr, 119,
      :cx_cursor_addr_label_expr, 120,
      :cx_cursor_stmt_expr, 121,
      :cx_cursor_generic_selection_expr, 122,
      :cx_cursor_gnu_null_expr, 123,
      :cx_cursor_cxx_static_cast_expr, 124,
      :cx_cursor_cxx_dynamic_cast_expr, 125,
      :cx_cursor_cxx_reinterpret_cast_expr, 126,
      :cx_cursor_cxx_const_cast_expr, 127,
      :cx_cursor_cxx_functional_cast_expr, 128,
      :cx_cursor_cxx_typeid_expr, 129,
      :cx_cursor_cxx_bool_literal_expr, 130,
      :cx_cursor_cxx_null_ptr_literal_expr, 131,
      :cx_cursor_cxx_this_expr, 132,
      :cx_cursor_cxx_throw_expr, 133,
      :cx_cursor_cxx_new_expr, 134,
      :cx_cursor_cxx_delete_expr, 135,
      :cx_cursor_unary_expr, 136,
      :cx_cursor_obj_c_string_literal, 137,
      :cx_cursor_obj_c_encode_expr, 138,
      :cx_cursor_obj_c_selector_expr, 139,
      :cx_cursor_obj_c_protocol_expr, 140,
      :cx_cursor_obj_c_bridged_cast_expr, 141,
      :cx_cursor_pack_expansion_expr, 142,
      :cx_cursor_size_of_pack_expr, 143,
      :cx_cursor_lambda_expr, 144,
      :cx_cursor_obj_c_bool_literal_expr, 145,
      :cx_cursor_obj_c_self_expr, 146,
      :cx_cursor_omp_array_section_expr, 147,
      :cx_cursor_obj_c_availability_check_expr, 148,
      :cx_cursor_fixed_point_literal, 149,
      :cx_cursor_omp_array_shaping_expr, 150,
      :cx_cursor_omp_iterator_expr, 151,
      :cx_cursor_cxx_addrspace_cast_expr, 152,
      :cx_cursor_concept_specialization_expr, 153,
      :cx_cursor_requires_expr, 154,
      :cx_cursor_cxx_paren_list_init_expr, 155,
      :cx_cursor_pack_indexing_expr, 156,
      :cx_cursor_last_expr, 156,
      :cx_cursor_first_stmt, 200,
      :cx_cursor_unexposed_stmt, 200,
      :cx_cursor_label_stmt, 201,
      :cx_cursor_compound_stmt, 202,
      :cx_cursor_case_stmt, 203,
      :cx_cursor_default_stmt, 204,
      :cx_cursor_if_stmt, 205,
      :cx_cursor_switch_stmt, 206,
      :cx_cursor_while_stmt, 207,
      :cx_cursor_do_stmt, 208,
      :cx_cursor_for_stmt, 209,
      :cx_cursor_goto_stmt, 210,
      :cx_cursor_indirect_goto_stmt, 211,
      :cx_cursor_continue_stmt, 212,
      :cx_cursor_break_stmt, 213,
      :cx_cursor_return_stmt, 214,
      :cx_cursor_gcc_asm_stmt, 215,
      :cx_cursor_asm_stmt, 215,
      :cx_cursor_obj_c_at_try_stmt, 216,
      :cx_cursor_obj_c_at_catch_stmt, 217,
      :cx_cursor_obj_c_at_finally_stmt, 218,
      :cx_cursor_obj_c_at_throw_stmt, 219,
      :cx_cursor_obj_c_at_synchronized_stmt, 220,
      :cx_cursor_obj_c_autorelease_pool_stmt, 221,
      :cx_cursor_obj_c_for_collection_stmt, 222,
      :cx_cursor_cxx_catch_stmt, 223,
      :cx_cursor_cxx_try_stmt, 224,
      :cx_cursor_cxx_for_range_stmt, 225,
      :cx_cursor_seh_try_stmt, 226,
      :cx_cursor_seh_except_stmt, 227,
      :cx_cursor_seh_finally_stmt, 228,
      :cx_cursor_ms_asm_stmt, 229,
      :cx_cursor_null_stmt, 230,
      :cx_cursor_decl_stmt, 231,
      :cx_cursor_omp_parallel_directive, 232,
      :cx_cursor_omp_simd_directive, 233,
      :cx_cursor_omp_for_directive, 234,
      :cx_cursor_omp_sections_directive, 235,
      :cx_cursor_omp_section_directive, 236,
      :cx_cursor_omp_single_directive, 237,
      :cx_cursor_omp_parallel_for_directive, 238,
      :cx_cursor_omp_parallel_sections_directive, 239,
      :cx_cursor_omp_task_directive, 240,
      :cx_cursor_omp_master_directive, 241,
      :cx_cursor_omp_critical_directive, 242,
      :cx_cursor_omp_taskyield_directive, 243,
      :cx_cursor_omp_barrier_directive, 244,
      :cx_cursor_omp_taskwait_directive, 245,
      :cx_cursor_omp_flush_directive, 246,
      :cx_cursor_seh_leave_stmt, 247,
      :cx_cursor_omp_ordered_directive, 248,
      :cx_cursor_omp_atomic_directive, 249,
      :cx_cursor_omp_for_simd_directive, 250,
      :cx_cursor_omp_parallel_for_simd_directive, 251,
      :cx_cursor_omp_target_directive, 252,
      :cx_cursor_omp_teams_directive, 253,
      :cx_cursor_omp_taskgroup_directive, 254,
      :cx_cursor_omp_cancellation_point_directive, 255,
      :cx_cursor_omp_cancel_directive, 256,
      :cx_cursor_omp_target_data_directive, 257,
      :cx_cursor_omp_task_loop_directive, 258,
      :cx_cursor_omp_task_loop_simd_directive, 259,
      :cx_cursor_omp_distribute_directive, 260,
      :cx_cursor_omp_target_enter_data_directive, 261,
      :cx_cursor_omp_target_exit_data_directive, 262,
      :cx_cursor_omp_target_parallel_directive, 263,
      :cx_cursor_omp_target_parallel_for_directive, 264,
      :cx_cursor_omp_target_update_directive, 265,
      :cx_cursor_omp_distribute_parallel_for_directive, 266,
      :cx_cursor_omp_distribute_parallel_for_simd_directive, 267,
      :cx_cursor_omp_distribute_simd_directive, 268,
      :cx_cursor_omp_target_parallel_for_simd_directive, 269,
      :cx_cursor_omp_target_simd_directive, 270,
      :cx_cursor_omp_teams_distribute_directive, 271,
      :cx_cursor_omp_teams_distribute_simd_directive, 272,
      :cx_cursor_omp_teams_distribute_parallel_for_simd_directive, 273,
      :cx_cursor_omp_teams_distribute_parallel_for_directive, 274,
      :cx_cursor_omp_target_teams_directive, 275,
      :cx_cursor_omp_target_teams_distribute_directive, 276,
      :cx_cursor_omp_target_teams_distribute_parallel_for_directive, 277,
      :cx_cursor_omp_target_teams_distribute_parallel_for_simd_directive, 278,
      :cx_cursor_omp_target_teams_distribute_simd_directive, 279,
      :cx_cursor_builtin_bit_cast_expr, 280,
      :cx_cursor_omp_master_task_loop_directive, 281,
      :cx_cursor_omp_parallel_master_task_loop_directive, 282,
      :cx_cursor_omp_master_task_loop_simd_directive, 283,
      :cx_cursor_omp_parallel_master_task_loop_simd_directive, 284,
      :cx_cursor_omp_parallel_master_directive, 285,
      :cx_cursor_omp_depobj_directive, 286,
      :cx_cursor_omp_scan_directive, 287,
      :cx_cursor_omp_tile_directive, 288,
      :cx_cursor_omp_canonical_loop, 289,
      :cx_cursor_omp_interop_directive, 290,
      :cx_cursor_omp_dispatch_directive, 291,
      :cx_cursor_omp_masked_directive, 292,
      :cx_cursor_omp_unroll_directive, 293,
      :cx_cursor_omp_meta_directive, 294,
      :cx_cursor_omp_generic_loop_directive, 295,
      :cx_cursor_omp_teams_generic_loop_directive, 296,
      :cx_cursor_omp_target_teams_generic_loop_directive, 297,
      :cx_cursor_omp_parallel_generic_loop_directive, 298,
      :cx_cursor_omp_target_parallel_generic_loop_directive, 299,
      :cx_cursor_omp_parallel_masked_directive, 300,
      :cx_cursor_omp_masked_task_loop_directive, 301,
      :cx_cursor_omp_masked_task_loop_simd_directive, 302,
      :cx_cursor_omp_parallel_masked_task_loop_directive, 303,
      :cx_cursor_omp_parallel_masked_task_loop_simd_directive, 304,
      :cx_cursor_omp_error_directive, 305,
      :cx_cursor_omp_scope_directive, 306,
      :cx_cursor_open_acc_compute_construct, 320,
      :cx_cursor_last_stmt, 320,
      :cx_cursor_translation_unit, 350,
      :cx_cursor_first_attr, 400,
      :cx_cursor_unexposed_attr, 400,
      :cx_cursor_ib_action_attr, 401,
      :cx_cursor_ib_outlet_attr, 402,
      :cx_cursor_ib_outlet_collection_attr, 403,
      :cx_cursor_cxx_final_attr, 404,
      :cx_cursor_cxx_override_attr, 405,
      :cx_cursor_annotate_attr, 406,
      :cx_cursor_asm_label_attr, 407,
      :cx_cursor_packed_attr, 408,
      :cx_cursor_pure_attr, 409,
      :cx_cursor_const_attr, 410,
      :cx_cursor_no_duplicate_attr, 411,
      :cx_cursor_cuda_constant_attr, 412,
      :cx_cursor_cuda_device_attr, 413,
      :cx_cursor_cuda_global_attr, 414,
      :cx_cursor_cuda_host_attr, 415,
      :cx_cursor_cuda_shared_attr, 416,
      :cx_cursor_visibility_attr, 417,
      :cx_cursor_dll_export, 418,
      :cx_cursor_dll_import, 419,
      :cx_cursor_ns_returns_retained, 420,
      :cx_cursor_ns_returns_not_retained, 421,
      :cx_cursor_ns_returns_autoreleased, 422,
      :cx_cursor_ns_consumes_self, 423,
      :cx_cursor_ns_consumed, 424,
      :cx_cursor_obj_c_exception, 425,
      :cx_cursor_obj_cns_object, 426,
      :cx_cursor_obj_c_independent_class, 427,
      :cx_cursor_obj_c_precise_lifetime, 428,
      :cx_cursor_obj_c_returns_inner_pointer, 429,
      :cx_cursor_obj_c_requires_super, 430,
      :cx_cursor_obj_c_root_class, 431,
      :cx_cursor_obj_c_subclassing_restricted, 432,
      :cx_cursor_obj_c_explicit_protocol_impl, 433,
      :cx_cursor_obj_c_designated_initializer, 434,
      :cx_cursor_obj_c_runtime_visible, 435,
      :cx_cursor_obj_c_boxable, 436,
      :cx_cursor_flag_enum, 437,
      :cx_cursor_convergent_attr, 438,
      :cx_cursor_warn_unused_attr, 439,
      :cx_cursor_warn_unused_result_attr, 440,
      :cx_cursor_aligned_attr, 441,
      :cx_cursor_last_attr, 441,
      :cx_cursor_preprocessing_directive, 500,
      :cx_cursor_macro_definition, 501,
      :cx_cursor_macro_expansion, 502,
      :cx_cursor_macro_instantiation, 502,
      :cx_cursor_inclusion_directive, 503,
      :cx_cursor_first_preprocessing, 500,
      :cx_cursor_last_preprocessing, 503,
      :cx_cursor_module_import_decl, 600,
      :cx_cursor_type_alias_template_decl, 601,
      :cx_cursor_static_assert, 602,
      :cx_cursor_friend_decl, 603,
      :cx_cursor_concept_decl, 604,
      :cx_cursor_first_extra_decl, 600,
      :cx_cursor_last_extra_decl, 604,
      :cx_cursor_overload_candidate, 700
  )
  
  class CXCursor < FFI::Struct
    layout :kind, CXCursorKind,
      :xdata, :int,
      :data, [:pointer, 3]
  end
  
  attach_function :clang_get_null_cursor, :clang_getNullCursor, [], cx_cursor.by_value
  attach_function :clang_get_translation_unit_cursor, :clang_getTranslationUnitCursor, [:pointer], cx_cursor.by_value
  attach_function :clang_equal_cursors, :clang_equalCursors, [cx_cursor.by_value, cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_null, :clang_Cursor_isNull, [cx_cursor.by_value], :int
  attach_function :clang_hash_cursor, :clang_hashCursor, [cx_cursor.by_value], :uint
  attach_function :clang_get_cursor_kind, :clang_getCursorKind, [cx_cursor.by_value], CXCursorKind
  attach_function :clang_is_declaration, :clang_isDeclaration, [CXCursorKind], :uint
  attach_function :clang_is_invalid_declaration, :clang_isInvalidDeclaration, [cx_cursor.by_value], :uint
  attach_function :clang_is_reference, :clang_isReference, [CXCursorKind], :uint
  attach_function :clang_is_expression, :clang_isExpression, [CXCursorKind], :uint
  attach_function :clang_is_statement, :clang_isStatement, [CXCursorKind], :uint
  attach_function :clang_is_attribute, :clang_isAttribute, [CXCursorKind], :uint
  attach_function :clang_cursor_has_attrs, :clang_Cursor_hasAttrs, [cx_cursor.by_value], :uint
  attach_function :clang_is_invalid, :clang_isInvalid, [CXCursorKind], :uint
  attach_function :clang_is_translation_unit, :clang_isTranslationUnit, [CXCursorKind], :uint
  attach_function :clang_is_preprocessing, :clang_isPreprocessing, [CXCursorKind], :uint
  attach_function :clang_is_unexposed, :clang_isUnexposed, [CXCursorKind], :uint
  
  CXLinkageKind = enum(
      :cx_linkage_invalid, 0,
      :cx_linkage_no_linkage, 1,
      :cx_linkage_internal, 2,
      :cx_linkage_unique_external, 3,
      :cx_linkage_external, 4
  )
  
  attach_function :clang_get_cursor_linkage, :clang_getCursorLinkage, [cx_cursor.by_value], CXLinkageKind
  
  CXVisibilityKind = enum(
      :cx_visibility_invalid, 0,
      :cx_visibility_hidden, 1,
      :cx_visibility_protected, 2,
      :cx_visibility_default, 3
  )
  
  attach_function :clang_get_cursor_visibility, :clang_getCursorVisibility, [cx_cursor.by_value], CXVisibilityKind
  attach_function :clang_get_cursor_availability, :clang_getCursorAvailability, [cx_cursor.by_value], CXAvailabilityKind
  
  class CXPlatformAvailability < FFI::Struct
    layout :platform, cx_string,
      :introduced, cx_version,
      :deprecated, cx_version,
      :obsoleted, cx_version,
      :unavailable, :int,
      :message, cx_string
  end
  
  attach_function :clang_get_cursor_platform_availability, :clang_getCursorPlatformAvailability, [cx_cursor.by_value, :pointer, CXString.by_ref, :pointer, CXString.by_ref, CXPlatformAvailability.by_ref, :int], :int
  attach_function :clang_dispose_cx_platform_availability, :clang_disposeCXPlatformAvailability, [CXPlatformAvailability.by_ref], :void
  attach_function :clang_cursor_get_var_decl_initializer, :clang_Cursor_getVarDeclInitializer, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_cursor_has_var_decl_global_storage, :clang_Cursor_hasVarDeclGlobalStorage, [cx_cursor.by_value], :int
  attach_function :clang_cursor_has_var_decl_external_storage, :clang_Cursor_hasVarDeclExternalStorage, [cx_cursor.by_value], :int
  
  CXLanguageKind = enum(
      :cx_language_invalid, 0,
      :cx_language_c, 1,
      :cx_language_obj_c, 2,
      :cx_language_c_plus_plus, 3
  )
  
  attach_function :clang_get_cursor_language, :clang_getCursorLanguage, [cx_cursor.by_value], CXLanguageKind
  
  CXTLSKind = enum(
      :cxtls_none, 0,
      :cxtls_dynamic, 1,
      :cxtls_static, 2
  )
  
  attach_function :clang_get_cursor_tls_kind, :clang_getCursorTLSKind, [cx_cursor.by_value], CXTLSKind
  attach_function :clang_cursor_get_translation_unit, :clang_Cursor_getTranslationUnit, [cx_cursor.by_value], :pointer
  
  class CXCursorSetImpl < FFI::Struct
  end
  
  typedef CXCursorSetImpl.ptr, :cx_cursor_set
  attach_function :clang_create_cx_cursor_set, :clang_createCXCursorSet, [], :pointer
  attach_function :clang_dispose_cx_cursor_set, :clang_disposeCXCursorSet, [:pointer], :void
  attach_function :clang_cx_cursor_set_contains, :clang_CXCursorSet_contains, [:pointer, cx_cursor.by_value], :uint
  attach_function :clang_cx_cursor_set_insert, :clang_CXCursorSet_insert, [:pointer, cx_cursor.by_value], :uint
  attach_function :clang_get_cursor_semantic_parent, :clang_getCursorSemanticParent, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_get_cursor_lexical_parent, :clang_getCursorLexicalParent, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_get_overridden_cursors, :clang_getOverriddenCursors, [cx_cursor.by_value, :pointer, :pointer], :void
  attach_function :clang_dispose_overridden_cursors, :clang_disposeOverriddenCursors, [CXCursor.by_ref], :void
  attach_function :clang_get_included_file, :clang_getIncludedFile, [cx_cursor.by_value], :pointer
  attach_function :clang_get_cursor, :clang_getCursor, [:pointer, cx_source_location.by_value], cx_cursor.by_value
  attach_function :clang_get_cursor_location, :clang_getCursorLocation, [cx_cursor.by_value], cx_source_location.by_value
  attach_function :clang_get_cursor_extent, :clang_getCursorExtent, [cx_cursor.by_value], cx_source_range.by_value
  
  CXTypeKind = enum(
      :cx_type_invalid, 0,
      :cx_type_unexposed, 1,
      :cx_type_void, 2,
      :cx_type_bool, 3,
      :cx_type_char_u, 4,
      :cx_type_u_char, 5,
      :cx_type_char16, 6,
      :cx_type_char32, 7,
      :cx_type_u_short, 8,
      :cx_type_u_int, 9,
      :cx_type_u_long, 10,
      :cx_type_u_long_long, 11,
      :cx_type_u_int128, 12,
      :cx_type_char_s, 13,
      :cx_type_s_char, 14,
      :cx_type_w_char, 15,
      :cx_type_short, 16,
      :cx_type_int, 17,
      :cx_type_long, 18,
      :cx_type_long_long, 19,
      :cx_type_int128, 20,
      :cx_type_float, 21,
      :cx_type_double, 22,
      :cx_type_long_double, 23,
      :cx_type_null_ptr, 24,
      :cx_type_overload, 25,
      :cx_type_dependent, 26,
      :cx_type_obj_c_id, 27,
      :cx_type_obj_c_class, 28,
      :cx_type_obj_c_sel, 29,
      :cx_type_float128, 30,
      :cx_type_half, 31,
      :cx_type_float16, 32,
      :cx_type_short_accum, 33,
      :cx_type_accum, 34,
      :cx_type_long_accum, 35,
      :cx_type_u_short_accum, 36,
      :cx_type_u_accum, 37,
      :cx_type_u_long_accum, 38,
      :cx_type_b_float16, 39,
      :cx_type_ibm128, 40,
      :cx_type_first_builtin, 2,
      :cx_type_last_builtin, 40,
      :cx_type_complex, 100,
      :cx_type_pointer, 101,
      :cx_type_block_pointer, 102,
      :cx_type_l_value_reference, 103,
      :cx_type_r_value_reference, 104,
      :cx_type_record, 105,
      :cx_type_enum, 106,
      :cx_type_typedef, 107,
      :cx_type_obj_c_interface, 108,
      :cx_type_obj_c_object_pointer, 109,
      :cx_type_function_no_proto, 110,
      :cx_type_function_proto, 111,
      :cx_type_constant_array, 112,
      :cx_type_vector, 113,
      :cx_type_incomplete_array, 114,
      :cx_type_variable_array, 115,
      :cx_type_dependent_sized_array, 116,
      :cx_type_member_pointer, 117,
      :cx_type_auto, 118,
      :cx_type_elaborated, 119,
      :cx_type_pipe, 120,
      :cx_type_ocl_image1d_ro, 121,
      :cx_type_ocl_image1d_array_ro, 122,
      :cx_type_ocl_image1d_buffer_ro, 123,
      :cx_type_ocl_image2d_ro, 124,
      :cx_type_ocl_image2d_array_ro, 125,
      :cx_type_ocl_image2d_depth_ro, 126,
      :cx_type_ocl_image2d_array_depth_ro, 127,
      :cx_type_ocl_image2d_msaaro, 128,
      :cx_type_ocl_image2d_array_msaaro, 129,
      :cx_type_ocl_image2d_msaa_depth_ro, 130,
      :cx_type_ocl_image2d_array_msaa_depth_ro, 131,
      :cx_type_ocl_image3d_ro, 132,
      :cx_type_ocl_image1d_wo, 133,
      :cx_type_ocl_image1d_array_wo, 134,
      :cx_type_ocl_image1d_buffer_wo, 135,
      :cx_type_ocl_image2d_wo, 136,
      :cx_type_ocl_image2d_array_wo, 137,
      :cx_type_ocl_image2d_depth_wo, 138,
      :cx_type_ocl_image2d_array_depth_wo, 139,
      :cx_type_ocl_image2d_msaawo, 140,
      :cx_type_ocl_image2d_array_msaawo, 141,
      :cx_type_ocl_image2d_msaa_depth_wo, 142,
      :cx_type_ocl_image2d_array_msaa_depth_wo, 143,
      :cx_type_ocl_image3d_wo, 144,
      :cx_type_ocl_image1d_rw, 145,
      :cx_type_ocl_image1d_array_rw, 146,
      :cx_type_ocl_image1d_buffer_rw, 147,
      :cx_type_ocl_image2d_rw, 148,
      :cx_type_ocl_image2d_array_rw, 149,
      :cx_type_ocl_image2d_depth_rw, 150,
      :cx_type_ocl_image2d_array_depth_rw, 151,
      :cx_type_ocl_image2d_msaarw, 152,
      :cx_type_ocl_image2d_array_msaarw, 153,
      :cx_type_ocl_image2d_msaa_depth_rw, 154,
      :cx_type_ocl_image2d_array_msaa_depth_rw, 155,
      :cx_type_ocl_image3d_rw, 156,
      :cx_type_ocl_sampler, 157,
      :cx_type_ocl_event, 158,
      :cx_type_ocl_queue, 159,
      :cx_type_ocl_reserve_id, 160,
      :cx_type_obj_c_object, 161,
      :cx_type_obj_c_type_param, 162,
      :cx_type_attributed, 163,
      :cx_type_ocl_intel_subgroup_avc_mce_payload, 164,
      :cx_type_ocl_intel_subgroup_avc_ime_payload, 165,
      :cx_type_ocl_intel_subgroup_avc_ref_payload, 166,
      :cx_type_ocl_intel_subgroup_avc_sic_payload, 167,
      :cx_type_ocl_intel_subgroup_avc_mce_result, 168,
      :cx_type_ocl_intel_subgroup_avc_ime_result, 169,
      :cx_type_ocl_intel_subgroup_avc_ref_result, 170,
      :cx_type_ocl_intel_subgroup_avc_sic_result, 171,
      :cx_type_ocl_intel_subgroup_avc_ime_result_single_reference_streamout, 172,
      :cx_type_ocl_intel_subgroup_avc_ime_result_dual_reference_streamout, 173,
      :cx_type_ocl_intel_subgroup_avc_ime_single_reference_streamin, 174,
      :cx_type_ocl_intel_subgroup_avc_ime_dual_reference_streamin, 175,
      :cx_type_ocl_intel_subgroup_avc_ime_result_single_ref_streamout, 172,
      :cx_type_ocl_intel_subgroup_avc_ime_result_dual_ref_streamout, 173,
      :cx_type_ocl_intel_subgroup_avc_ime_single_ref_streamin, 174,
      :cx_type_ocl_intel_subgroup_avc_ime_dual_ref_streamin, 175,
      :cx_type_ext_vector, 176,
      :cx_type_atomic, 177,
      :cx_type_btf_tag_attributed, 178
  )
  
  CXCallingConv = enum(
      :cx_calling_conv_default, 0,
      :cx_calling_conv_c, 1,
      :cx_calling_conv_x86_std_call, 2,
      :cx_calling_conv_x86_fast_call, 3,
      :cx_calling_conv_x86_this_call, 4,
      :cx_calling_conv_x86_pascal, 5,
      :cx_calling_conv_aapcs, 6,
      :cx_calling_conv_aapcs_vfp, 7,
      :cx_calling_conv_x86_reg_call, 8,
      :cx_calling_conv_intel_ocl_bicc, 9,
      :cx_calling_conv_win64, 10,
      :cx_calling_conv_x86_64_win64, 10,
      :cx_calling_conv_x86_64_sys_v, 11,
      :cx_calling_conv_x86_vector_call, 12,
      :cx_calling_conv_swift, 13,
      :cx_calling_conv_preserve_most, 14,
      :cx_calling_conv_preserve_all, 15,
      :cx_calling_conv_a_arch64_vector_call, 16,
      :cx_calling_conv_swift_async, 17,
      :cx_calling_conv_a_arch64_svepcs, 18,
      :cx_calling_conv_m68k_rtd, 19,
      :cx_calling_conv_preserve_none, 20,
      :cx_calling_conv_riscv_vector_call, 21,
      :cx_calling_conv_invalid, 100,
      :cx_calling_conv_unexposed, 200
  )
  
  class CXType < FFI::Struct
    layout :kind, CXTypeKind,
      :data, [:pointer, 2]
  end
  
  attach_function :clang_get_cursor_type, :clang_getCursorType, [cx_cursor.by_value], cx_type.by_value
  attach_function :clang_get_type_spelling, :clang_getTypeSpelling, [cx_type.by_value], cx_string.by_value
  attach_function :clang_get_typedef_decl_underlying_type, :clang_getTypedefDeclUnderlyingType, [cx_cursor.by_value], cx_type.by_value
  attach_function :clang_get_enum_decl_integer_type, :clang_getEnumDeclIntegerType, [cx_cursor.by_value], cx_type.by_value
  attach_function :clang_get_enum_constant_decl_value, :clang_getEnumConstantDeclValue, [cx_cursor.by_value], :long_long
  attach_function :clang_get_enum_constant_decl_unsigned_value, :clang_getEnumConstantDeclUnsignedValue, [cx_cursor.by_value], :ulong_long
  attach_function :clang_cursor_is_bit_field, :clang_Cursor_isBitField, [cx_cursor.by_value], :uint
  attach_function :clang_get_field_decl_bit_width, :clang_getFieldDeclBitWidth, [cx_cursor.by_value], :int
  attach_function :clang_cursor_get_num_arguments, :clang_Cursor_getNumArguments, [cx_cursor.by_value], :int
  attach_function :clang_cursor_get_argument, :clang_Cursor_getArgument, [cx_cursor.by_value, :uint], cx_cursor.by_value
  
  CXTemplateArgumentKind = enum(
      :cx_template_argument_kind_null, 0,
      :cx_template_argument_kind_type, 1,
      :cx_template_argument_kind_declaration, 2,
      :cx_template_argument_kind_null_ptr, 3,
      :cx_template_argument_kind_integral, 4,
      :cx_template_argument_kind_template, 5,
      :cx_template_argument_kind_template_expansion, 6,
      :cx_template_argument_kind_expression, 7,
      :cx_template_argument_kind_pack, 8,
      :cx_template_argument_kind_invalid, 9
  )
  
  attach_function :clang_cursor_get_num_template_arguments, :clang_Cursor_getNumTemplateArguments, [cx_cursor.by_value], :int
  attach_function :clang_cursor_get_template_argument_kind, :clang_Cursor_getTemplateArgumentKind, [cx_cursor.by_value, :uint], CXTemplateArgumentKind
  attach_function :clang_cursor_get_template_argument_type, :clang_Cursor_getTemplateArgumentType, [cx_cursor.by_value, :uint], cx_type.by_value
  attach_function :clang_cursor_get_template_argument_value, :clang_Cursor_getTemplateArgumentValue, [cx_cursor.by_value, :uint], :long_long
  attach_function :clang_cursor_get_template_argument_unsigned_value, :clang_Cursor_getTemplateArgumentUnsignedValue, [cx_cursor.by_value, :uint], :ulong_long
  attach_function :clang_equal_types, :clang_equalTypes, [cx_type.by_value, cx_type.by_value], :uint
  attach_function :clang_get_canonical_type, :clang_getCanonicalType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_is_const_qualified_type, :clang_isConstQualifiedType, [cx_type.by_value], :uint
  attach_function :clang_cursor_is_macro_function_like, :clang_Cursor_isMacroFunctionLike, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_macro_builtin, :clang_Cursor_isMacroBuiltin, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_function_inlined, :clang_Cursor_isFunctionInlined, [cx_cursor.by_value], :uint
  attach_function :clang_is_volatile_qualified_type, :clang_isVolatileQualifiedType, [cx_type.by_value], :uint
  attach_function :clang_is_restrict_qualified_type, :clang_isRestrictQualifiedType, [cx_type.by_value], :uint
  attach_function :clang_get_address_space, :clang_getAddressSpace, [cx_type.by_value], :uint
  attach_function :clang_get_typedef_name, :clang_getTypedefName, [cx_type.by_value], cx_string.by_value
  attach_function :clang_get_pointee_type, :clang_getPointeeType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_unqualified_type, :clang_getUnqualifiedType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_non_reference_type, :clang_getNonReferenceType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_type_declaration, :clang_getTypeDeclaration, [cx_type.by_value], cx_cursor.by_value
  attach_function :clang_get_decl_obj_c_type_encoding, :clang_getDeclObjCTypeEncoding, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_type_get_obj_c_encoding, :clang_Type_getObjCEncoding, [cx_type.by_value], cx_string.by_value
  attach_function :clang_get_type_kind_spelling, :clang_getTypeKindSpelling, [CXTypeKind], cx_string.by_value
  attach_function :clang_get_function_type_calling_conv, :clang_getFunctionTypeCallingConv, [cx_type.by_value], CXCallingConv
  attach_function :clang_get_result_type, :clang_getResultType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_exception_specification_type, :clang_getExceptionSpecificationType, [cx_type.by_value], :int
  attach_function :clang_get_num_arg_types, :clang_getNumArgTypes, [cx_type.by_value], :int
  attach_function :clang_get_arg_type, :clang_getArgType, [cx_type.by_value, :uint], cx_type.by_value
  attach_function :clang_type_get_obj_c_object_base_type, :clang_Type_getObjCObjectBaseType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_type_get_num_obj_c_protocol_refs, :clang_Type_getNumObjCProtocolRefs, [cx_type.by_value], :uint
  attach_function :clang_type_get_obj_c_protocol_decl, :clang_Type_getObjCProtocolDecl, [cx_type.by_value, :uint], cx_cursor.by_value
  attach_function :clang_type_get_num_obj_c_type_args, :clang_Type_getNumObjCTypeArgs, [cx_type.by_value], :uint
  attach_function :clang_type_get_obj_c_type_arg, :clang_Type_getObjCTypeArg, [cx_type.by_value, :uint], cx_type.by_value
  attach_function :clang_is_function_type_variadic, :clang_isFunctionTypeVariadic, [cx_type.by_value], :uint
  attach_function :clang_get_cursor_result_type, :clang_getCursorResultType, [cx_cursor.by_value], cx_type.by_value
  attach_function :clang_get_cursor_exception_specification_type, :clang_getCursorExceptionSpecificationType, [cx_cursor.by_value], :int
  attach_function :clang_is_pod_type, :clang_isPODType, [cx_type.by_value], :uint
  attach_function :clang_get_element_type, :clang_getElementType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_num_elements, :clang_getNumElements, [cx_type.by_value], :long_long
  attach_function :clang_get_array_element_type, :clang_getArrayElementType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_get_array_size, :clang_getArraySize, [cx_type.by_value], :long_long
  attach_function :clang_type_get_named_type, :clang_Type_getNamedType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_type_is_transparent_tag_typedef, :clang_Type_isTransparentTagTypedef, [cx_type.by_value], :uint
  
  CXTypeNullabilityKind = enum(
      :cx_type_nullability_non_null, 0,
      :cx_type_nullability_nullable, 1,
      :cx_type_nullability_unspecified, 2,
      :cx_type_nullability_invalid, 3,
      :cx_type_nullability_nullable_result, 4
  )
  
  attach_function :clang_type_get_nullability, :clang_Type_getNullability, [cx_type.by_value], CXTypeNullabilityKind
  
  CXTypeLayoutError = enum(
      :cx_type_layout_error_invalid, -1,
      :cx_type_layout_error_incomplete, -2,
      :cx_type_layout_error_dependent, -3,
      :cx_type_layout_error_not_constant_size, -4,
      :cx_type_layout_error_invalid_field_name, -5,
      :cx_type_layout_error_undeduced, -6
  )
  
  attach_function :clang_type_get_align_of, :clang_Type_getAlignOf, [cx_type.by_value], :long_long
  attach_function :clang_type_get_class_type, :clang_Type_getClassType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_type_get_size_of, :clang_Type_getSizeOf, [cx_type.by_value], :long_long
  attach_function :clang_type_get_offset_of, :clang_Type_getOffsetOf, [cx_type.by_value, :string], :long_long
  attach_function :clang_type_get_modified_type, :clang_Type_getModifiedType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_type_get_value_type, :clang_Type_getValueType, [cx_type.by_value], cx_type.by_value
  attach_function :clang_cursor_get_offset_of_field, :clang_Cursor_getOffsetOfField, [cx_cursor.by_value], :long_long
  attach_function :clang_cursor_is_anonymous, :clang_Cursor_isAnonymous, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_anonymous_record_decl, :clang_Cursor_isAnonymousRecordDecl, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_inline_namespace, :clang_Cursor_isInlineNamespace, [cx_cursor.by_value], :uint
  
  CXRefQualifierKind = enum(
      :cx_ref_qualifier_none, 0,
      :cx_ref_qualifier_l_value, 1,
      :cx_ref_qualifier_r_value, 2
  )
  
  attach_function :clang_type_get_num_template_arguments, :clang_Type_getNumTemplateArguments, [cx_type.by_value], :int
  attach_function :clang_type_get_template_argument_as_type, :clang_Type_getTemplateArgumentAsType, [cx_type.by_value, :uint], cx_type.by_value
  attach_function :clang_type_get_cxx_ref_qualifier, :clang_Type_getCXXRefQualifier, [cx_type.by_value], CXRefQualifierKind
  attach_function :clang_is_virtual_base, :clang_isVirtualBase, [cx_cursor.by_value], :uint
  
  CX_CXXAccessSpecifier = enum(
      :cx_cxx_invalid_access_specifier, 0,
      :cx_cxx_public, 1,
      :cx_cxx_protected, 2,
      :cx_cxx_private, 3
  )
  
  attach_function :clang_get_cxx_access_specifier, :clang_getCXXAccessSpecifier, [cx_cursor.by_value], CXCXXAccessSpecifier
  
  CX_StorageClass = enum(
      :cx_sc_invalid, 0,
      :cx_sc_none, 1,
      :cx_sc_extern, 2,
      :cx_sc_static, 3,
      :cx_sc_private_extern, 4,
      :cx_sc_open_cl_work_group_local, 5,
      :cx_sc_auto, 6,
      :cx_sc_register, 7
  )
  
  attach_function :clang_cursor_get_storage_class, :clang_Cursor_getStorageClass, [cx_cursor.by_value], CXStorageClass
  attach_function :clang_get_num_overloaded_decls, :clang_getNumOverloadedDecls, [cx_cursor.by_value], :uint
  attach_function :clang_get_overloaded_decl, :clang_getOverloadedDecl, [cx_cursor.by_value, :uint], cx_cursor.by_value
  attach_function :clang_get_ib_outlet_collection_type, :clang_getIBOutletCollectionType, [cx_cursor.by_value], cx_type.by_value
  
  CXChildVisitResult = enum(
      :cx_child_visit_break, 0,
      :cx_child_visit_continue, 1,
      :cx_child_visit_recurse, 2
  )
  
  callback :cx_cursor_visitor, [], CXChildVisitResult
  attach_function :clang_visit_children, :clang_visitChildren, [cx_cursor.by_value, :pointer, :pointer], :uint
  
  class CXChildVisitResult < FFI::Struct
  end
  
  typedef CXChildVisitResult.ptr, :cx_cursor_visitor_block
  attach_function :clang_visit_children_with_block, :clang_visitChildrenWithBlock, [cx_cursor.by_value, :pointer], :uint
  attach_function :clang_get_cursor_usr, :clang_getCursorUSR, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_class, :clang_constructUSR_ObjCClass, [:string], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_category, :clang_constructUSR_ObjCCategory, [:string, :string], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_protocol, :clang_constructUSR_ObjCProtocol, [:string], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_ivar, :clang_constructUSR_ObjCIvar, [:string, cx_string.by_value], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_method, :clang_constructUSR_ObjCMethod, [:string, :uint, cx_string.by_value], cx_string.by_value
  attach_function :clang_construct_usr_obj_c_property, :clang_constructUSR_ObjCProperty, [:string, cx_string.by_value], cx_string.by_value
  attach_function :clang_get_cursor_spelling, :clang_getCursorSpelling, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_cursor_get_spelling_name_range, :clang_Cursor_getSpellingNameRange, [cx_cursor.by_value, :uint, :uint], cx_source_range.by_value
  typedef :pointer, :cx_printing_policy
  
  CXPrintingPolicyProperty = enum(
      :cx_printing_policy_indentation, 0,
      :cx_printing_policy_suppress_specifiers, 1,
      :cx_printing_policy_suppress_tag_keyword, 2,
      :cx_printing_policy_include_tag_definition, 3,
      :cx_printing_policy_suppress_scope, 4,
      :cx_printing_policy_suppress_unwritten_scope, 5,
      :cx_printing_policy_suppress_initializers, 6,
      :cx_printing_policy_constant_array_size_as_written, 7,
      :cx_printing_policy_anonymous_tag_locations, 8,
      :cx_printing_policy_suppress_strong_lifetime, 9,
      :cx_printing_policy_suppress_lifetime_qualifiers, 10,
      :cx_printing_policy_suppress_template_args_in_cxx_constructors, 11,
      :cx_printing_policy_bool, 12,
      :cx_printing_policy_restrict, 13,
      :cx_printing_policy_alignof, 14,
      :cx_printing_policy_underscore_alignof, 15,
      :cx_printing_policy_use_void_for_zero_params, 16,
      :cx_printing_policy_terse_output, 17,
      :cx_printing_policy_polish_for_declaration, 18,
      :cx_printing_policy_half, 19,
      :cx_printing_policy_msw_char, 20,
      :cx_printing_policy_include_newlines, 21,
      :cx_printing_policy_msvc_formatting, 22,
      :cx_printing_policy_constants_as_written, 23,
      :cx_printing_policy_suppress_implicit_base, 24,
      :cx_printing_policy_fully_qualified_name, 25,
      :cx_printing_policy_last_property, 25
  )
  
  attach_function :clang_printing_policy_get_property, :clang_PrintingPolicy_getProperty, [:pointer, CXPrintingPolicyProperty], :uint
  attach_function :clang_printing_policy_set_property, :clang_PrintingPolicy_setProperty, [:pointer, CXPrintingPolicyProperty, :uint], :void
  attach_function :clang_get_cursor_printing_policy, :clang_getCursorPrintingPolicy, [cx_cursor.by_value], :pointer
  attach_function :clang_printing_policy_dispose, :clang_PrintingPolicy_dispose, [:pointer], :void
  attach_function :clang_get_cursor_pretty_printed, :clang_getCursorPrettyPrinted, [cx_cursor.by_value, :pointer], cx_string.by_value
  attach_function :clang_get_cursor_display_name, :clang_getCursorDisplayName, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_get_cursor_referenced, :clang_getCursorReferenced, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_get_cursor_definition, :clang_getCursorDefinition, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_is_cursor_definition, :clang_isCursorDefinition, [cx_cursor.by_value], :uint
  attach_function :clang_get_canonical_cursor, :clang_getCanonicalCursor, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_cursor_get_obj_c_selector_index, :clang_Cursor_getObjCSelectorIndex, [cx_cursor.by_value], :int
  attach_function :clang_cursor_is_dynamic_call, :clang_Cursor_isDynamicCall, [cx_cursor.by_value], :int
  attach_function :clang_cursor_get_receiver_type, :clang_Cursor_getReceiverType, [cx_cursor.by_value], cx_type.by_value
  
  CXObjCPropertyAttrKind = enum(
      :cx_obj_c_property_attr_noattr, 0,
      :cx_obj_c_property_attr_readonly, 1,
      :cx_obj_c_property_attr_getter, 2,
      :cx_obj_c_property_attr_assign, 4,
      :cx_obj_c_property_attr_readwrite, 8,
      :cx_obj_c_property_attr_retain, 16,
      :cx_obj_c_property_attr_copy, 32,
      :cx_obj_c_property_attr_nonatomic, 64,
      :cx_obj_c_property_attr_setter, 128,
      :cx_obj_c_property_attr_atomic, 256,
      :cx_obj_c_property_attr_weak, 512,
      :cx_obj_c_property_attr_strong, 1024,
      :cx_obj_c_property_attr_unsafe_unretained, 2048,
      :cx_obj_c_property_attr_class, 4096
  )
  
  attach_function :clang_cursor_get_obj_c_property_attributes, :clang_Cursor_getObjCPropertyAttributes, [cx_cursor.by_value, :uint], :uint
  attach_function :clang_cursor_get_obj_c_property_getter_name, :clang_Cursor_getObjCPropertyGetterName, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_cursor_get_obj_c_property_setter_name, :clang_Cursor_getObjCPropertySetterName, [cx_cursor.by_value], cx_string.by_value
  
  CXObjCDeclQualifierKind = enum(
      :cx_obj_c_decl_qualifier_none, 0,
      :cx_obj_c_decl_qualifier_in, 1,
      :cx_obj_c_decl_qualifier_inout, 2,
      :cx_obj_c_decl_qualifier_out, 4,
      :cx_obj_c_decl_qualifier_bycopy, 8,
      :cx_obj_c_decl_qualifier_byref, 16,
      :cx_obj_c_decl_qualifier_oneway, 32
  )
  
  attach_function :clang_cursor_get_obj_c_decl_qualifiers, :clang_Cursor_getObjCDeclQualifiers, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_obj_c_optional, :clang_Cursor_isObjCOptional, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_variadic, :clang_Cursor_isVariadic, [cx_cursor.by_value], :uint
  attach_function :clang_cursor_is_external_symbol, :clang_Cursor_isExternalSymbol, [cx_cursor.by_value, CXString.by_ref, CXString.by_ref, :pointer], :uint
  attach_function :clang_cursor_get_comment_range, :clang_Cursor_getCommentRange, [cx_cursor.by_value], cx_source_range.by_value
  attach_function :clang_cursor_get_raw_comment_text, :clang_Cursor_getRawCommentText, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_cursor_get_brief_comment_text, :clang_Cursor_getBriefCommentText, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_cursor_get_mangling, :clang_Cursor_getMangling, [cx_cursor.by_value], cx_string.by_value
  attach_function :clang_cursor_get_cxx_manglings, :clang_Cursor_getCXXManglings, [cx_cursor.by_value], CXStringSet.by_ref
  attach_function :clang_cursor_get_obj_c_manglings, :clang_Cursor_getObjCManglings, [cx_cursor.by_value], CXStringSet.by_ref
  typedef :pointer, :cx_module
  attach_function :clang_cursor_get_module, :clang_Cursor_getModule, [cx_cursor.by_value], :pointer
  attach_function :clang_get_module_for_file, :clang_getModuleForFile, [:pointer, :pointer], :pointer
  attach_function :clang_module_get_ast_file, :clang_Module_getASTFile, [:pointer], :pointer
  attach_function :clang_module_get_parent, :clang_Module_getParent, [:pointer], :pointer
  attach_function :clang_module_get_name, :clang_Module_getName, [:pointer], cx_string.by_value
  attach_function :clang_module_get_full_name, :clang_Module_getFullName, [:pointer], cx_string.by_value
  attach_function :clang_module_is_system, :clang_Module_isSystem, [:pointer], :int
  attach_function :clang_module_get_num_top_level_headers, :clang_Module_getNumTopLevelHeaders, [:pointer, :pointer], :uint
  attach_function :clang_module_get_top_level_header, :clang_Module_getTopLevelHeader, [:pointer, :pointer, :uint], :pointer
  attach_function :clang_cxx_constructor_is_converting_constructor, :clang_CXXConstructor_isConvertingConstructor, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_constructor_is_copy_constructor, :clang_CXXConstructor_isCopyConstructor, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_constructor_is_default_constructor, :clang_CXXConstructor_isDefaultConstructor, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_constructor_is_move_constructor, :clang_CXXConstructor_isMoveConstructor, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_field_is_mutable, :clang_CXXField_isMutable, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_defaulted, :clang_CXXMethod_isDefaulted, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_deleted, :clang_CXXMethod_isDeleted, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_pure_virtual, :clang_CXXMethod_isPureVirtual, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_static, :clang_CXXMethod_isStatic, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_virtual, :clang_CXXMethod_isVirtual, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_copy_assignment_operator, :clang_CXXMethod_isCopyAssignmentOperator, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_move_assignment_operator, :clang_CXXMethod_isMoveAssignmentOperator, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_explicit, :clang_CXXMethod_isExplicit, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_record_is_abstract, :clang_CXXRecord_isAbstract, [cx_cursor.by_value], :uint
  attach_function :clang_enum_decl_is_scoped, :clang_EnumDecl_isScoped, [cx_cursor.by_value], :uint
  attach_function :clang_cxx_method_is_const, :clang_CXXMethod_isConst, [cx_cursor.by_value], :uint
  attach_function :clang_get_template_cursor_kind, :clang_getTemplateCursorKind, [cx_cursor.by_value], CXCursorKind
  attach_function :clang_get_specialized_cursor_template, :clang_getSpecializedCursorTemplate, [cx_cursor.by_value], cx_cursor.by_value
  attach_function :clang_get_cursor_reference_name_range, :clang_getCursorReferenceNameRange, [cx_cursor.by_value, :uint, :uint], cx_source_range.by_value
  
  CXNameRefFlags = enum(
      :cx_name_range_want_qualifier, 1,
      :cx_name_range_want_template_args, 2,
      :cx_name_range_want_single_piece, 4
  )
  
  CXTokenKind = enum(
      :cx_token_punctuation, 0,
      :cx_token_keyword, 1,
      :cx_token_identifier, 2,
      :cx_token_literal, 3,
      :cx_token_comment, 4
  )
  
  class CXToken < FFI::Struct
    layout :int_data, [:uint, 4],
      :ptr_data, :pointer
  end
  
  attach_function :clang_get_token, :clang_getToken, [:pointer, cx_source_location.by_value], CXToken.by_ref
  attach_function :clang_get_token_kind, :clang_getTokenKind, [cx_token.by_value], CXTokenKind
  attach_function :clang_get_token_spelling, :clang_getTokenSpelling, [:pointer, cx_token.by_value], cx_string.by_value
  attach_function :clang_get_token_location, :clang_getTokenLocation, [:pointer, cx_token.by_value], cx_source_location.by_value
  attach_function :clang_get_token_extent, :clang_getTokenExtent, [:pointer, cx_token.by_value], cx_source_range.by_value
  attach_function :clang_tokenize, :clang_tokenize, [:pointer, cx_source_range.by_value, :pointer, :pointer], :void
  attach_function :clang_annotate_tokens, :clang_annotateTokens, [:pointer, CXToken.by_ref, :uint, CXCursor.by_ref], :void
  attach_function :clang_dispose_tokens, :clang_disposeTokens, [:pointer, CXToken.by_ref, :uint], :void
  attach_function :clang_get_cursor_kind_spelling, :clang_getCursorKindSpelling, [CXCursorKind], cx_string.by_value
  attach_function :clang_get_definition_spelling_and_extent, :clang_getDefinitionSpellingAndExtent, [cx_cursor.by_value, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_enable_stack_traces, :clang_enableStackTraces, [], :void
  callback :clang_executeOnThread_fn_callback, [:pointer], :void
  attach_function :clang_execute_on_thread, :clang_executeOnThread, [:clang_executeOnThread_fn_callback, :pointer, :uint], :void
  typedef :pointer, :cx_completion_string
  
  class CXCompletionResult < FFI::Struct
    layout :cursor_kind, CXCursorKind,
      :completion_string, :pointer
  end
  
  CXCompletionChunkKind = enum(
      :cx_completion_chunk_optional, 0,
      :cx_completion_chunk_typed_text, 1,
      :cx_completion_chunk_text, 2,
      :cx_completion_chunk_placeholder, 3,
      :cx_completion_chunk_informative, 4,
      :cx_completion_chunk_current_parameter, 5,
      :cx_completion_chunk_left_paren, 6,
      :cx_completion_chunk_right_paren, 7,
      :cx_completion_chunk_left_bracket, 8,
      :cx_completion_chunk_right_bracket, 9,
      :cx_completion_chunk_left_brace, 10,
      :cx_completion_chunk_right_brace, 11,
      :cx_completion_chunk_left_angle, 12,
      :cx_completion_chunk_right_angle, 13,
      :cx_completion_chunk_comma, 14,
      :cx_completion_chunk_result_type, 15,
      :cx_completion_chunk_colon, 16,
      :cx_completion_chunk_semi_colon, 17,
      :cx_completion_chunk_equal, 18,
      :cx_completion_chunk_horizontal_space, 19,
      :cx_completion_chunk_vertical_space, 20
  )
  
  attach_function :clang_get_completion_chunk_kind, :clang_getCompletionChunkKind, [:pointer, :uint], CXCompletionChunkKind
  attach_function :clang_get_completion_chunk_text, :clang_getCompletionChunkText, [:pointer, :uint], cx_string.by_value
  attach_function :clang_get_completion_chunk_completion_string, :clang_getCompletionChunkCompletionString, [:pointer, :uint], :pointer
  attach_function :clang_get_num_completion_chunks, :clang_getNumCompletionChunks, [:pointer], :uint
  attach_function :clang_get_completion_priority, :clang_getCompletionPriority, [:pointer], :uint
  attach_function :clang_get_completion_availability, :clang_getCompletionAvailability, [:pointer], CXAvailabilityKind
  attach_function :clang_get_completion_num_annotations, :clang_getCompletionNumAnnotations, [:pointer], :uint
  attach_function :clang_get_completion_annotation, :clang_getCompletionAnnotation, [:pointer, :uint], cx_string.by_value
  attach_function :clang_get_completion_parent, :clang_getCompletionParent, [:pointer, :pointer], cx_string.by_value
  attach_function :clang_get_completion_brief_comment, :clang_getCompletionBriefComment, [:pointer], cx_string.by_value
  attach_function :clang_get_cursor_completion_string, :clang_getCursorCompletionString, [cx_cursor.by_value], :pointer
  
  class CXCodeCompleteResults < FFI::Struct
    layout :results, CXCompletionResult.ptr,
      :num_results, :uint
  end
  
  attach_function :clang_get_completion_num_fix_its, :clang_getCompletionNumFixIts, [CXCodeCompleteResults.by_ref, :uint], :uint
  attach_function :clang_get_completion_fix_it, :clang_getCompletionFixIt, [CXCodeCompleteResults.by_ref, :uint, :uint, CXSourceRange.by_ref], cx_string.by_value
  
  CXCodeComplete_Flags = enum(
      :cx_code_complete_include_macros, 1,
      :cx_code_complete_include_code_patterns, 2,
      :cx_code_complete_include_brief_comments, 4,
      :cx_code_complete_skip_preamble, 8,
      :cx_code_complete_include_completions_with_fix_its, 16
  )
  
  CXCompletionContext = enum(
      :cx_completion_context_unexposed, 0,
      :cx_completion_context_any_type, 1,
      :cx_completion_context_any_value, 2,
      :cx_completion_context_obj_c_object_value, 4,
      :cx_completion_context_obj_c_selector_value, 8,
      :cx_completion_context_cxx_class_type_value, 16,
      :cx_completion_context_dot_member_access, 32,
      :cx_completion_context_arrow_member_access, 64,
      :cx_completion_context_obj_c_property_access, 128,
      :cx_completion_context_enum_tag, 256,
      :cx_completion_context_union_tag, 512,
      :cx_completion_context_struct_tag, 1024,
      :cx_completion_context_class_tag, 2048,
      :cx_completion_context_namespace, 4096,
      :cx_completion_context_nested_name_specifier, 8192,
      :cx_completion_context_obj_c_interface, 16384,
      :cx_completion_context_obj_c_protocol, 32768,
      :cx_completion_context_obj_c_category, 65536,
      :cx_completion_context_obj_c_instance_message, 131072,
      :cx_completion_context_obj_c_class_message, 262144,
      :cx_completion_context_obj_c_selector_name, 524288,
      :cx_completion_context_macro_name, 1048576,
      :cx_completion_context_natural_language, 2097152,
      :cx_completion_context_included_file, 4194304,
      :cx_completion_context_unknown, 8388607
  )
  
  attach_function :clang_default_code_complete_options, :clang_defaultCodeCompleteOptions, [], :uint
  attach_function :clang_code_complete_at, :clang_codeCompleteAt, [:pointer, :string, :uint, :uint, CXUnsavedFile.by_ref, :uint, :uint], CXCodeCompleteResults.by_ref
  attach_function :clang_sort_code_completion_results, :clang_sortCodeCompletionResults, [CXCompletionResult.by_ref, :uint], :void
  attach_function :clang_dispose_code_complete_results, :clang_disposeCodeCompleteResults, [CXCodeCompleteResults.by_ref], :void
  attach_function :clang_code_complete_get_num_diagnostics, :clang_codeCompleteGetNumDiagnostics, [CXCodeCompleteResults.by_ref], :uint
  attach_function :clang_code_complete_get_diagnostic, :clang_codeCompleteGetDiagnostic, [CXCodeCompleteResults.by_ref, :uint], :pointer
  attach_function :clang_code_complete_get_contexts, :clang_codeCompleteGetContexts, [CXCodeCompleteResults.by_ref], :ulong_long
  attach_function :clang_code_complete_get_container_kind, :clang_codeCompleteGetContainerKind, [CXCodeCompleteResults.by_ref, :pointer], CXCursorKind
  attach_function :clang_code_complete_get_container_usr, :clang_codeCompleteGetContainerUSR, [CXCodeCompleteResults.by_ref], cx_string.by_value
  attach_function :clang_code_complete_get_obj_c_selector, :clang_codeCompleteGetObjCSelector, [CXCodeCompleteResults.by_ref], cx_string.by_value
  attach_function :clang_get_clang_version, :clang_getClangVersion, [], cx_string.by_value
  attach_function :clang_toggle_crash_recovery, :clang_toggleCrashRecovery, [:uint], :void
  callback :cx_inclusion_visitor, [], :void
  attach_function :clang_get_inclusions, :clang_getInclusions, [:pointer, :pointer, :pointer], :void
  
  CXEvalResultKind = enum(
      :cx_eval_int, 1,
      :cx_eval_float, 2,
      :cx_eval_obj_c_str_literal, 3,
      :cx_eval_str_literal, 4,
      :cx_eval_cf_str, 5,
      :cx_eval_other, 6,
      :cx_eval_un_exposed, 0
  )
  
  typedef :pointer, :cx_eval_result
  attach_function :clang_cursor_evaluate, :clang_Cursor_Evaluate, [cx_cursor.by_value], :pointer
  attach_function :clang_eval_result_get_kind, :clang_EvalResult_getKind, [:pointer], CXEvalResultKind
  attach_function :clang_eval_result_get_as_int, :clang_EvalResult_getAsInt, [:pointer], :int
  attach_function :clang_eval_result_get_as_long_long, :clang_EvalResult_getAsLongLong, [:pointer], :long_long
  attach_function :clang_eval_result_is_unsigned_int, :clang_EvalResult_isUnsignedInt, [:pointer], :uint
  attach_function :clang_eval_result_get_as_unsigned, :clang_EvalResult_getAsUnsigned, [:pointer], :ulong_long
  attach_function :clang_eval_result_get_as_double, :clang_EvalResult_getAsDouble, [:pointer], :double
  attach_function :clang_eval_result_get_as_str, :clang_EvalResult_getAsStr, [:pointer], :string
  attach_function :clang_eval_result_dispose, :clang_EvalResult_dispose, [:pointer], :void
  typedef :pointer, :cx_remapping
  attach_function :clang_get_remappings, :clang_getRemappings, [:string], :pointer
  attach_function :clang_get_remappings_from_file_list, :clang_getRemappingsFromFileList, [:pointer, :uint], :pointer
  attach_function :clang_remap_get_num_files, :clang_remap_getNumFiles, [:pointer], :uint
  attach_function :clang_remap_get_filenames, :clang_remap_getFilenames, [:pointer, :uint, CXString.by_ref, CXString.by_ref], :void
  attach_function :clang_remap_dispose, :clang_remap_dispose, [:pointer], :void
  
  CXVisitorResult = enum(
      :cx_visit_break, 0,
      :cx_visit_continue, 1
  )
  
  callback :CXCursorAndRangeVisitor_visit_callback, [:pointer, cx_cursor.by_value, cx_source_range.by_value], CXVisitorResult
  
  class CXCursorAndRangeVisitor < FFI::Struct
    layout :context, :pointer,
      :visit, :CXCursorAndRangeVisitor_visit_callback
  end
  
  CXResult = enum(
      :cx_result_success, 0,
      :cx_result_invalid, 1,
      :cx_result_visit_break, 2
  )
  
  attach_function :clang_find_references_in_file, :clang_findReferencesInFile, [cx_cursor.by_value, :pointer, cx_cursor_and_range_visitor.by_value], CXResult
  attach_function :clang_find_includes_in_file, :clang_findIncludesInFile, [:pointer, :pointer, cx_cursor_and_range_visitor.by_value], CXResult
  
  class CXCursorAndRangeVisitorBlock < FFI::Struct
  end
  
  typedef CXCursorAndRangeVisitorBlock.ptr, :cx_cursor_and_range_visitor_block
  attach_function :clang_find_references_in_file_with_block, :clang_findReferencesInFileWithBlock, [cx_cursor.by_value, :pointer, :pointer], CXResult
  attach_function :clang_find_includes_in_file_with_block, :clang_findIncludesInFileWithBlock, [:pointer, :pointer, :pointer], CXResult
  typedef :pointer, :cx_idx_client_file
  typedef :pointer, :cx_idx_client_entity
  typedef :pointer, :cx_idx_client_container
  typedef :pointer, :cx_idx_client_ast_file
  
  class CXIdxLoc < FFI::Struct
    layout :ptr_data, [:pointer, 2],
      :int_data, :uint
  end
  
  class CXIdxIncludedFileInfo < FFI::Struct
    layout :hash_loc, cx_idx_loc,
      :filename, :string,
      :file, :pointer,
      :is_import, :int,
      :is_angled, :int,
      :is_module_import, :int
  end
  
  class CXIdxImportedASTFileInfo < FFI::Struct
    layout :file, :pointer,
      :module, :pointer,
      :loc, cx_idx_loc,
      :is_implicit, :int
  end
  
  CXIdxEntityKind = enum(
      :cx_idx_entity_unexposed, 0,
      :cx_idx_entity_typedef, 1,
      :cx_idx_entity_function, 2,
      :cx_idx_entity_variable, 3,
      :cx_idx_entity_field, 4,
      :cx_idx_entity_enum_constant, 5,
      :cx_idx_entity_obj_c_class, 6,
      :cx_idx_entity_obj_c_protocol, 7,
      :cx_idx_entity_obj_c_category, 8,
      :cx_idx_entity_obj_c_instance_method, 9,
      :cx_idx_entity_obj_c_class_method, 10,
      :cx_idx_entity_obj_c_property, 11,
      :cx_idx_entity_obj_c_ivar, 12,
      :cx_idx_entity_enum, 13,
      :cx_idx_entity_struct, 14,
      :cx_idx_entity_union, 15,
      :cx_idx_entity_cxx_class, 16,
      :cx_idx_entity_cxx_namespace, 17,
      :cx_idx_entity_cxx_namespace_alias, 18,
      :cx_idx_entity_cxx_static_variable, 19,
      :cx_idx_entity_cxx_static_method, 20,
      :cx_idx_entity_cxx_instance_method, 21,
      :cx_idx_entity_cxx_constructor, 22,
      :cx_idx_entity_cxx_destructor, 23,
      :cx_idx_entity_cxx_conversion_function, 24,
      :cx_idx_entity_cxx_type_alias, 25,
      :cx_idx_entity_cxx_interface, 26,
      :cx_idx_entity_cxx_concept, 27
  )
  
  CXIdxEntityLanguage = enum(
      :cx_idx_entity_lang_none, 0,
      :cx_idx_entity_lang_c, 1,
      :cx_idx_entity_lang_obj_c, 2,
      :cx_idx_entity_lang_cxx, 3,
      :cx_idx_entity_lang_swift, 4
  )
  
  CXIdxEntityCXXTemplateKind = enum(
      :cx_idx_entity_non_template, 0,
      :cx_idx_entity_template, 1,
      :cx_idx_entity_template_partial_specialization, 2,
      :cx_idx_entity_template_specialization, 3
  )
  
  CXIdxAttrKind = enum(
      :cx_idx_attr_unexposed, 0,
      :cx_idx_attr_ib_action, 1,
      :cx_idx_attr_ib_outlet, 2,
      :cx_idx_attr_ib_outlet_collection, 3
  )
  
  class CXIdxAttrInfo < FFI::Struct
    layout :kind, CXIdxAttrKind,
      :cursor, cx_cursor,
      :loc, cx_idx_loc
  end
  
  class CXIdxEntityInfo < FFI::Struct
    layout :kind, CXIdxEntityKind,
           :template_kind, CXIdxEntityCXXTemplateKind,
           :lang, CXIdxEntityLanguage,
           :ruby, :string,
           :usr, :string,
           :cursor, cx_cursor,
           :attributes, :pointer,
           :num_attributes, :uint
  end
  
  class CXIdxContainerInfo < FFI::Struct
    layout :cursor, cx_cursor
  end
  
  class CXIdxIBOutletCollectionAttrInfo < FFI::Struct
    layout :attr_info, CXIdxAttrInfo.ptr,
      :objc_class, CXIdxEntityInfo.ptr,
      :class_cursor, cx_cursor,
      :class_loc, cx_idx_loc
  end
  
  CXIdxDeclInfoFlags = enum(
      :cx_idx_decl_flag_skipped, 1
  )
  
  class CXIdxDeclInfo < FFI::Struct
    layout :entity_info, CXIdxEntityInfo.ptr,
      :cursor, cx_cursor,
      :loc, cx_idx_loc,
      :semantic_container, CXIdxContainerInfo.ptr,
      :lexical_container, CXIdxContainerInfo.ptr,
      :is_redeclaration, :int,
      :is_definition, :int,
      :is_container, :int,
      :decl_as_container, CXIdxContainerInfo.ptr,
      :is_implicit, :int,
      :attributes, :pointer,
      :num_attributes, :uint,
      :flags, :uint
  end
  
  CXIdxObjCContainerKind = enum(
      :cx_idx_obj_c_container_forward_ref, 0,
      :cx_idx_obj_c_container_interface, 1,
      :cx_idx_obj_c_container_implementation, 2
  )
  
  class CXIdxObjCContainerDeclInfo < FFI::Struct
    layout :decl_info, CXIdxDeclInfo.ptr,
      :kind, CXIdxObjCContainerKind
  end
  
  class CXIdxBaseClassInfo < FFI::Struct
    layout :base, CXIdxEntityInfo.ptr,
      :cursor, cx_cursor,
      :loc, cx_idx_loc
  end
  
  class CXIdxObjCProtocolRefInfo < FFI::Struct
    layout :protocol, CXIdxEntityInfo.ptr,
      :cursor, cx_cursor,
      :loc, cx_idx_loc
  end
  
  class CXIdxObjCProtocolRefListInfo < FFI::Struct
    layout :protocols, :pointer,
      :num_protocols, :uint
  end
  
  class CXIdxObjCInterfaceDeclInfo < FFI::Struct
    layout :container_info, CXIdxObjCContainerDeclInfo.ptr,
      :super_info, CXIdxBaseClassInfo.ptr,
      :protocols, CXIdxObjCProtocolRefListInfo.ptr
  end
  
  class CXIdxObjCCategoryDeclInfo < FFI::Struct
    layout :container_info, CXIdxObjCContainerDeclInfo.ptr,
      :objc_class, CXIdxEntityInfo.ptr,
      :class_cursor, cx_cursor,
      :class_loc, cx_idx_loc,
      :protocols, CXIdxObjCProtocolRefListInfo.ptr
  end
  
  class CXIdxObjCPropertyDeclInfo < FFI::Struct
    layout :decl_info, CXIdxDeclInfo.ptr,
      :getter, CXIdxEntityInfo.ptr,
      :setter, CXIdxEntityInfo.ptr
  end
  
  class CXIdxCXXClassDeclInfo < FFI::Struct
    layout :decl_info, CXIdxDeclInfo.ptr,
      :bases, :pointer,
      :num_bases, :uint
  end
  
  CXIdxEntityRefKind = enum(
      :cx_idx_entity_ref_direct, 1,
      :cx_idx_entity_ref_implicit, 2
  )
  
  CXSymbolRole = enum(
      :cx_symbol_role_none, 0,
      :cx_symbol_role_declaration, 1,
      :cx_symbol_role_definition, 2,
      :cx_symbol_role_reference, 4,
      :cx_symbol_role_read, 8,
      :cx_symbol_role_write, 16,
      :cx_symbol_role_call, 32,
      :cx_symbol_role_dynamic, 64,
      :cx_symbol_role_address_of, 128,
      :cx_symbol_role_implicit, 256
  )
  
  class CXIdxEntityRefInfo < FFI::Struct
    layout :kind, CXIdxEntityRefKind,
      :cursor, cx_cursor,
      :loc, cx_idx_loc,
      :referenced_entity, CXIdxEntityInfo.ptr,
      :parent_entity, CXIdxEntityInfo.ptr,
      :container, CXIdxContainerInfo.ptr,
      :role, CXSymbolRole
  end
  
  callback :IndexerCallbacks_abortQuery_callback, [:pointer, :pointer], :int
  callback :IndexerCallbacks_diagnostic_callback, [:pointer, :pointer, :pointer], :void
  callback :IndexerCallbacks_enteredMainFile_callback, [:pointer, :pointer, :pointer], :pointer
  callback :IndexerCallbacks_ppIncludedFile_callback, [:pointer, :pointer], :pointer
  callback :IndexerCallbacks_importedASTFile_callback, [:pointer, :pointer], :pointer
  callback :IndexerCallbacks_startedTranslationUnit_callback, [:pointer, :pointer], :pointer
  callback :IndexerCallbacks_indexDeclaration_callback, [:pointer, :pointer], :void
  callback :IndexerCallbacks_indexEntityReference_callback, [:pointer, :pointer], :void
  
  class IndexerCallbacks < FFI::Struct
    layout :abort_query, :IndexerCallbacks_abortQuery_callback,
      :diagnostic, :IndexerCallbacks_diagnostic_callback,
      :entered_main_file, :IndexerCallbacks_enteredMainFile_callback,
      :pp_included_file, :IndexerCallbacks_ppIncludedFile_callback,
      :imported_ast_file, :IndexerCallbacks_importedASTFile_callback,
      :started_translation_unit, :IndexerCallbacks_startedTranslationUnit_callback,
      :index_declaration, :IndexerCallbacks_indexDeclaration_callback,
      :index_entity_reference, :IndexerCallbacks_indexEntityReference_callback
  end
  
  attach_function :clang_index_is_entity_obj_c_container_kind, :clang_index_isEntityObjCContainerKind, [CXIdxEntityKind], :int
  attach_function :clang_index_get_obj_c_container_decl_info, :clang_index_getObjCContainerDeclInfo, [CXIdxDeclInfo.by_ref], CXIdxObjCContainerDeclInfo.by_ref
  attach_function :clang_index_get_obj_c_interface_decl_info, :clang_index_getObjCInterfaceDeclInfo, [CXIdxDeclInfo.by_ref], CXIdxObjCInterfaceDeclInfo.by_ref
  attach_function :clang_index_get_obj_c_category_decl_info, :clang_index_getObjCCategoryDeclInfo, [CXIdxDeclInfo.by_ref], CXIdxObjCCategoryDeclInfo.by_ref
  attach_function :clang_index_get_obj_c_protocol_ref_list_info, :clang_index_getObjCProtocolRefListInfo, [CXIdxDeclInfo.by_ref], CXIdxObjCProtocolRefListInfo.by_ref
  attach_function :clang_index_get_obj_c_property_decl_info, :clang_index_getObjCPropertyDeclInfo, [CXIdxDeclInfo.by_ref], CXIdxObjCPropertyDeclInfo.by_ref
  attach_function :clang_index_get_ib_outlet_collection_attr_info, :clang_index_getIBOutletCollectionAttrInfo, [CXIdxAttrInfo.by_ref], CXIdxIBOutletCollectionAttrInfo.by_ref
  attach_function :clang_index_get_cxx_class_decl_info, :clang_index_getCXXClassDeclInfo, [CXIdxDeclInfo.by_ref], CXIdxCXXClassDeclInfo.by_ref
  attach_function :clang_index_get_client_container, :clang_index_getClientContainer, [CXIdxContainerInfo.by_ref], :pointer
  attach_function :clang_index_set_client_container, :clang_index_setClientContainer, [CXIdxContainerInfo.by_ref, :pointer], :void
  attach_function :clang_index_get_client_entity, :clang_index_getClientEntity, [CXIdxEntityInfo.by_ref], :pointer
  attach_function :clang_index_set_client_entity, :clang_index_setClientEntity, [CXIdxEntityInfo.by_ref, :pointer], :void
  typedef :pointer, :cx_index_action
  attach_function :clang_index_action_create, :clang_IndexAction_create, [:pointer], :pointer
  attach_function :clang_index_action_dispose, :clang_IndexAction_dispose, [:pointer], :void
  
  CXIndexOptFlags = enum(
      :cx_index_opt_none, 0,
      :cx_index_opt_suppress_redundant_refs, 1,
      :cx_index_opt_index_function_local_symbols, 2,
      :cx_index_opt_index_implicit_template_instantiations, 4,
      :cx_index_opt_suppress_warnings, 8,
      :cx_index_opt_skip_parsed_bodies_in_session, 16
  )
  
  attach_function :clang_index_source_file, :clang_indexSourceFile, [:pointer, :pointer, IndexerCallbacks.by_ref, :uint, :uint, :string, :pointer, :int, CXUnsavedFile.by_ref, :uint, :pointer, :uint], :int
  attach_function :clang_index_source_file_full_argv, :clang_indexSourceFileFullArgv, [:pointer, :pointer, IndexerCallbacks.by_ref, :uint, :uint, :string, :pointer, :int, CXUnsavedFile.by_ref, :uint, :pointer, :uint], :int
  attach_function :clang_index_translation_unit, :clang_indexTranslationUnit, [:pointer, :pointer, IndexerCallbacks.by_ref, :uint, :uint, :pointer], :int
  attach_function :clang_index_loc_get_file_location, :clang_indexLoc_getFileLocation, [cx_idx_loc.by_value, :pointer, :pointer, :pointer, :pointer, :pointer], :void
  attach_function :clang_index_loc_get_cx_source_location, :clang_indexLoc_getCXSourceLocation, [cx_idx_loc.by_value], cx_source_location.by_value
  callback :cx_field_visitor, [], CXVisitorResult
  attach_function :clang_type_visit_fields, :clang_Type_visitFields, [cx_type.by_value, :pointer, :pointer], :uint
  
  CXBinaryOperatorKind = enum(
      :cx_binary_operator_invalid, 0,
      :cx_binary_operator_ptr_mem_d, 1,
      :cx_binary_operator_ptr_mem_i, 2,
      :cx_binary_operator_mul, 3,
      :cx_binary_operator_div, 4,
      :cx_binary_operator_rem, 5,
      :cx_binary_operator_add, 6,
      :cx_binary_operator_sub, 7,
      :cx_binary_operator_shl, 8,
      :cx_binary_operator_shr, 9,
      :cx_binary_operator_cmp, 10,
      :cx_binary_operator_lt, 11,
      :cx_binary_operator_gt, 12,
      :cx_binary_operator_le, 13,
      :cx_binary_operator_ge, 14,
      :cx_binary_operator_eq, 15,
      :cx_binary_operator_ne, 16,
      :cx_binary_operator_and, 17,
      :cx_binary_operator_xor, 18,
      :cx_binary_operator_or, 19,
      :cx_binary_operator_l_and, 20,
      :cx_binary_operator_l_or, 21,
      :cx_binary_operator_assign, 22,
      :cx_binary_operator_mul_assign, 23,
      :cx_binary_operator_div_assign, 24,
      :cx_binary_operator_rem_assign, 25,
      :cx_binary_operator_add_assign, 26,
      :cx_binary_operator_sub_assign, 27,
      :cx_binary_operator_shl_assign, 28,
      :cx_binary_operator_shr_assign, 29,
      :cx_binary_operator_and_assign, 30,
      :cx_binary_operator_xor_assign, 31,
      :cx_binary_operator_or_assign, 32,
      :cx_binary_operator_comma, 33
  )
  
  attach_function :clang_get_binary_operator_kind_spelling, :clang_getBinaryOperatorKindSpelling, [CXBinaryOperatorKind], cx_string.by_value
  attach_function :clang_get_cursor_binary_operator_kind, :clang_getCursorBinaryOperatorKind, [cx_cursor.by_value], CXBinaryOperatorKind
  
  CXUnaryOperatorKind = enum(
      :cx_unary_operator_invalid, 0,
      :cx_unary_operator_post_inc, 1,
      :cx_unary_operator_post_dec, 2,
      :cx_unary_operator_pre_inc, 3,
      :cx_unary_operator_pre_dec, 4,
      :cx_unary_operator_addr_of, 5,
      :cx_unary_operator_deref, 6,
      :cx_unary_operator_plus, 7,
      :cx_unary_operator_minus, 8,
      :cx_unary_operator_not, 9,
      :cx_unary_operator_l_not, 10,
      :cx_unary_operator_real, 11,
      :cx_unary_operator_imag, 12,
      :cx_unary_operator_extension, 13,
      :cx_unary_operator_coawait, 14
  )
  
  attach_function :clang_get_unary_operator_kind_spelling, :clang_getUnaryOperatorKindSpelling, [CXUnaryOperatorKind], cx_string.by_value
  attach_function :clang_get_cursor_unary_operator_kind, :clang_getCursorUnaryOperatorKind, [cx_cursor.by_value], CXUnaryOperatorKind
end
